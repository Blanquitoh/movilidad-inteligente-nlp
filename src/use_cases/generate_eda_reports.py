"""Use case for generating exploratory data analysis reports."""
from __future__ import annotations

from dataclasses import dataclass
from pathlib import Path
from typing import Any, Mapping, Protocol

import pandas as pd
from matplotlib.figure import Figure


class DatasetLoader(Protocol):
    """Abstraction responsible for loading the dataset under analysis."""

    def load(self) -> pd.DataFrame:
        ...


class DatasetAnalyzer(Protocol):
    """Extract descriptive metrics and figures from a dataset."""

    def compute_metrics(self, data: pd.DataFrame) -> Mapping[str, Any]:
        ...

    def build_figures(self, data: pd.DataFrame) -> Mapping[str, Figure]:
        ...


@dataclass(frozen=True)
class NotebookDocument:
    """Representation of a notebook artefact produced for reporting."""

    path: Path
    content: Mapping[str, Any]


class NotebookFactory(Protocol):
    """Factory that renders dataset insights into a notebook document."""

    def build(self, data: pd.DataFrame, metrics: Mapping[str, Any]) -> NotebookDocument:
        ...


@dataclass(frozen=True)
class GeneratedReports:
    """Collection of artefacts generated by the EDA use case."""

    metrics_path: Path
    figure_paths: Mapping[str, Path]
    notebook_path: Path


class ReportRepository(Protocol):
    """Persistence boundary for storing analytical artefacts."""

    def save_metrics(self, metrics: Mapping[str, Any]) -> Path:
        ...

    def save_figures(self, figures: Mapping[str, Figure]) -> Mapping[str, Path]:
        ...

    def save_notebook(self, notebook: NotebookDocument) -> Path:
        ...


class GenerateEdaReportsUseCase:
    """Coordinate dataset loading, analysis and persistence of reports."""

    def __init__(
        self,
        loader: DatasetLoader,
        analyzer: DatasetAnalyzer,
        notebook_factory: NotebookFactory,
        repository: ReportRepository,
    ) -> None:
        self._loader = loader
        self._analyzer = analyzer
        self._notebook_factory = notebook_factory
        self._repository = repository

    def execute(self) -> GeneratedReports:
        data = self._loader.load()
        if data.empty:
            raise ValueError("The dataset is empty; unable to build analytical reports.")

        metrics = self._analyzer.compute_metrics(data)
        figures = self._analyzer.build_figures(data)
        notebook = self._notebook_factory.build(data, metrics)

        metrics_path = self._repository.save_metrics(metrics)
        figure_paths = self._repository.save_figures(figures)
        notebook_path = self._repository.save_notebook(notebook)

        return GeneratedReports(
            metrics_path=metrics_path,
            figure_paths=figure_paths,
            notebook_path=notebook_path,
        )


__all__ = [
    "DatasetAnalyzer",
    "DatasetLoader",
    "GenerateEdaReportsUseCase",
    "GeneratedReports",
    "NotebookDocument",
    "NotebookFactory",
    "ReportRepository",
]
